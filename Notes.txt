3.28.17
function calls need to also infer the type if the type is stricter than that of the function declaration. Solution: add fake assignment statements from actuals to formals and infer them before inferring the rest of the statements in the function.

4.2.17
of:
	function(x){ return x; } main(){ y = function(3); return y; }
new:
main(){
	x = 3;
	y = stmts... return x;
	return y;
}

The trouble is a. unique local variables (I'm sure we could think of something) and b. Are we messing with anything in the future? We shouldn't be if everything is just defined for the namemap of this function!
What if we had:
main(a){
	x = a;
	y = stmts... return x;
	return y;
}
We'd just want everything to be typed to a's type. But what if it were never resolved?
g(c){
	return c;
}
f(b){
	return g(b);	
}

Well, main has to be called, or it doesn't. If it's called, it needs to be called with resolveable actuals, aka, actuals resolvable through annotate expr, right? We can't get information of them from inside their functions, but we could from their larger context, like:

main(){
	x = 3;
	function(x);
}

(So-- no formals for main?).
But either by assignment or by annotate_expr, by that point they should be resolved? What if they have both-- don't we need to collect them? Do we need to "infer" them? By what point can we be certain of their types?
Say we do a whole inference call on those actuals, so that we for sure have them resolved to types. That's what we're doing now, or should be.

What if we call a function twice in two ways?

function(x){ return x; } main(){	x = 3; function("sdf"); }

Then we'd want "x" in both to be different things. Solution: map ids to function#id.

What about this?

function(x){ return x; } main(){ z = 3; function(z); y = "sdf"; function(y); }


Solution: statements are inferred in order, so overwriting function#x isn't a problem?

We still need to compare the function with its declaration typing, I think!

Can we ever run out of new variables?

4.4.17 - 4.5.17
Okay-- function calls look good. Onto error-checking!

Accounted:
Wrong-length variable lists
Overloading functions not permitted	
Variables need to be defined before they're used.
Same formal twice
If conditional must be boolean, For middle stmt must be boolean, For first and last must be assignments

Not:
If assignments and returns must occur in all cases.

Recursive functions? (How would we handle those?)

Possible point of concern:
>f(a, b){ return b; } 

returns:
f(a, b){ : 'a
return (b: 'a); 'a
}
b and a seem to be of the same any type. I feel like this is wrong, though I can't figure out how to get a nafka mina. Oh-- it's due to the way things are printed. Maybe I'll fix when I'm less tired.

Okay, I think I fixed statements.
Included if, but there seems to be a problem with parsing them.

> f(x){ if(x > 0){ return true; }}
Error Parsing

Fixed.

I also need to decide if 'if' can make changes to the environment-- I can't see a way to allow x to be two different types in different branches but checking all assignment statements in all ifs is a bit formidable. Oh well.

	f(x){if(x < 11){ return 3; }} 
	now registers as an int. Issue-- there needs to be a return statement outside the if too.
	
	f(x){if(x < 11){ return 3; } return x;} problematically says mismatched returns when it should really force x to be an int.

	f(x){if(x < 11){ return 3; } return 5;} 
	is fine (error: predicate returns-- good)

Need to make everything work for optional for

f(x){ for(x = 3; x < 10; x = x + 1){ y = 4; }; return 5; }

Okay, something is weird with parsing for. Fixed! It was extra semicolons in the parser.

Oooh might have messed up scoping-- I shouldn't be able to access variables above the call but we totally can. (Not sure if I tied the formals to the inner function or the outer one). Oh no we should.

-----------------------------------------------------------------------------------------------------------
f(x){ x = [1,2,3]; return x[0]; } main(){ return f(3); }
Should not work. And now it doesn't. Oh snap.

f(x){ x = [1,2,3]; return x[0]; } main(){ return f([1,2,4]); }
Does work.

Fancy subset.
Updating expression map?
Checking array bounds?

f(x){ x = [1]; y = x[2]; return x; }
Registers perfectly as a list of int and an int, even though it's out of bounds.

f(x){ x = []; y = x[0]; return x; }
Registers as void, which is good, but...

f(x){ x = [10]; } is a list containing a single int, not a list of size ten.
Should we just #javastyle?

Mismatched types? No longer!
f(x){ y = {a:x}; return y;} main(){ return f(3); }


	f(){ y = {a:3}; return y.a; }
Newest mystery-- why on earth is y a void in the map? Why is it printing backwards?
Oh okay, phew. It was the way I was updating assisnments in the map, not indicative of a larger prob. Fixed now.

------------------------------------------------------------------------------------------

We need to make main a prereq.
-------------------------------------------------------------------------------------------
Unops!
f(x){ return !x; }
f(x){ return -x; }

both work now

---------------------------------------------------------------------------------------------

omg what if I do this?

f(x){ a = {school: 3}; a = {weight: 6, x: 9}; return a.school; }

a.school is still there..... !!!! Fixed!!!

what about records with any type? Hmmm should be resolved through functions though. And got that!

f(x){ a = {school: x}; return a.school; } a(){ y = f("234"); return f(23); }
If we disallow reassigning to variables, we have to allow this.
Okay-- it's allowed but not sure about this-- why are the formals voids?
----------------------------------------------------------------------------------------------

Superlocal for scoping needs to happen for assignments.

----------------------------------------------------------------------------------------------


Are we still dynamic typing?

----------------------------------------------------------------------------------------------

Note-- breaking for and if handling of scope.

-----------------------------------------------------------------------------------------------
Okay-- with for and if-- it was broken before because we inferred the statement in annotate expression but didn't update the map for statements inside those scopes. What we need to do is pass the map variables from annotate expression back to their infer_stmt_list and also to always call infer_stmt_list rather than infer_stmt on those inner stmts.
-------------------------------------------------------------------------------------------Questions for Danny-- 
Feeding in a file? Sys.argv.(1) (May create new dependencies)
Character literals in the scanner? Look at how other groups have done string-- Danny's group (| '"' (([^ '"'] | "\\\"")* as strlit) '"' { STRING_LITERAL(strlit) }) <-- ours are too complicated

| Compile -> 
  let output_file = Sys.argv.(2) and stdlib_file = Sys.argv.(3) in
  let stdlib = Utils.str_of_file stdlib_file in
  let file = open_out output_file
  in fprintf file "%s\n\n%s\n%s\n"
  stdlib prog (Utils.conclude_program ()); close_out file

f(x){ while(x < 3){ y = 4; } return 4; }

Checking ifs?
Checking for off indices of lists?

Don't initialize inside the if-- it needs to be outside. (though it can be modified there)
(if you initialize in if it's only accessible there)
recursively check inside control flow for return
or you could disallow returns in control flow

Arraylist situation-- runtime error for list index.
----------------------------------------------------------------------------------------------
To Do-- fix the system for records and dot for the fields and specific record types.

f(x){ a = {school: x}; return a; } b(){ c = f(3); return c.school; }
Works!!!

f(x){ y = 2; if(x > 3){ y = 2; } return 2;  }
No more error predicate return, lol.

f(x){ if(x > 3){ return 3; }}
Yes error, predicate return.


-------------------------------------------------------------------------------------------
Not sure why anyone would ever do this but this (consistent with our rules) throws an error.
f(x){ x = 3; } main(){ f("sdf"); }

as does this:
f(x){ y = 3; if(x > 3){ y = "d"; } h = y; return h; } 
h should type to int, not string.

f(x){ a = {school: x}; return a; } b(){ c = f(3); return c.school; }
is still alright.

---------------------------------------------------------------------------------------------
Need to allow derived types in lists (and check them for consistency).

nodes:

sarah:{a:"hey"; b:3}
Maybe should just make without keys.

I really need to ensure that each expression takes only  the proper types.
-----------------------------------------------------------------------------------------------
Leave space for the first two expressions in edge to be noexpr OR the third, for edge template in graph.

Do we need to update the map for graph assignments? We know what the type of everything is...
it's not being "assigned" the same way records are-- it's being added to a collection like lists.

f(x){ g = {a: x}; graph = g -- g with {b:x}; } main(){ y = f(3); }
Types correctly no longer.

f(x){ g = {a: x}; graph = (g -- g, g -- g) with {b:x}; }
Um-- this might run infinitely-- gotta figure out why. Nope! Works now!
f(x){ g = {a: x}; graph = (g -- g, g -- g) with {b:x}; graph & {a:3}; } Works!
f(x){ g = {a: x}; graph = (g -- g, g -- g) with {b:x}; graph = graph & {a:3}; } Works, I think.

f(x){ g = {a: x}; h = {}; graph = (g -- g, h -> h) with {b:x}; }
Yeah-- we're definitely getting into a really long loop or an infinite one. Oh fixed that but now there's a parse error. And now there isn't, yay!

f(x){ h = {school:"moriah"}; g = (h) with {}; }
h not a valid graph entry? Not any more, baby!

f(x){ h = {school:"moriah"}; g = (h) with {}; }
f(x){ g = {a: x}; h = {b:x}; graph = (g -- g, h -> h) with {b:x}; }
f(x){ g = {a: x}; h = {b:x}; edge = g -- g with {b:x}; }
f(x){ g = {a: x}; h = {b:x}; edge = g -- g; }  
All work, as far as I can tell!


Classify open and closed scopes. (open = can see above them)
records = closed.

Need to fix for scoping.
New values:
f(){ y = [1,2,3]; y[0] = 2; }

for(starting here, everything applies to the statement block only){}
records-- duplicate fields?


f(x){ x = {a: 3, a:4 }; }
f(x){ while(x < 3){ y = 5; }}

------------------------------------------------------------------------------------------
f(x){ for(x = 3; x < 3; x = x + 1;){ y = 3; } }  

for ((x: 'c) = (3: int); ((x: int) < (3: int): bool) ; (x: 'c) = ((x: int) + (1: int): int); (y: 'b) = (3: int); }


^Why is x a 'c instead of an int? Any implications?

f(x){ x = 5; return x; }
f(x){ : int
(x: 'c) = (5: int); return (x: int); int
}

Hm, no, I think it's okay. It infers the id before it infers the rest, and never updates the id field. I changed it so that it checks ids up in infer_assign.
#Okay what, why is this still an any type?
f(x){ return x.school; } g(){ f(3); }
Okay, now oorrectly throws (x: int) not a record.


f(x){ return x.school; } g(){ a = {f1: "hi", school: 2}; return f(a); }
f(x){ return x.school; } g(){ a = {f1: "hi", school: 2}; b = {school: "sdf"}; c = f(a); d = f(b); }
Okay, no longer running weirdly. Yay!
I really have to refactor, though.

f(){ a = [1,2,3]; a[0] = 2; }
Works now. Astutils!


f(){ a = {x: "a", x: 3}; } 
and 
f(){ a = {x: 2, x: 3}; } 
now throw duplicate record entry.

f(){ a = {a: 2, b: 3}; } 
f(){ a = {school: 2, b: 3, hi: "wer"}; } 
are throwing a weirdo error where they only catch one field?. Oh tg, it was just the print.

f(x){ display(x); }

--------------------------------------------------------------------------------------

 f(x, y){ x & y; } main(){ a = {}; b = () with {school:2}; f(b, a); }
Is throwing an error. No longer!

f(x, y){ x & y; } main(){ x = {a: 3}; y = {weight:2}; g = () with x; }

f(x, y){ x & y; } main(){ z = {a: 3}; y = {weight:2}; g = () with z; f(g, z); }
Okay-- this works, great.

f(x, y){ x .& y; } main(){ z = {a: 3}; y = z; edge = z -- z; g = () with z; f(g, edge); }
This works too-- adding an edge.

--------------------------------------------------------------------------------------
Trying to fix scoping.

f(x){ y = x; x = 3; }
Should not fail, but does. Okay, nvmnd. we good now.

f(){ y = x; x = 3; }
Should fail, and now does.


f(x, y){ x & y; } main(){ x = {a: 3}; y = {weight:2}; g = () with x; f(g, x); }
This is really weird-- could it be an x/x scoping problem?

f(){ x = "str\\"; }
Should work. Currently doesn't.

What if y is a copy of x-- should this:
f(x){ y = x; x = 3; }
change its type to int?

f(x){ y = "ser"; for(x = 3; x < 3; x = x + 1;){ y = 3; } return y; }  
Will have an error because for can see y.

f(x){ for(x = 3; x < 3; x = x + 1;){ y = 3; } y = "ser";  return y; }  
Won't have an error because scope of y is limited to this for.

f(x, y){ x .& y; } main(){ z = {a: 3}; y = z; y.a = 4; edge = z -- z; g = () with z; f(g, z); }
^Not a valid lvalue issue

f(x){ for(a in x){ y = 3; } } main(){ f(3); } 
Should and does throw an error.

f(x){ for(a in x){ y = 3; } } main(){ f([1,2,3]); } 
works.

Currently graph is commented out-- hopefully we'll have graph.nodes and graph.edges

Introducing the empty list trec. Hope I don't damn us all.
Nvmnid? Will have to think about that.
Okay-- we have trouble assigning to dots because we have to go find the record name, attach it back to the field name, you know the drill.


f(x){ x ^ 3; }

