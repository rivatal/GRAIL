type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | DIVIDE
  | ASSIGN
  | NOT
  | DOT
  | COLON
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOLEAN
  | VOID
  | STAR
  | LBRACKET
  | RBRACKET
  | DASH
  | RARROW
  | LARROW
  | ACCIO
  | BREAK
  | CHAR
  | DOUBLE
  | EDGE
  | EMPTY
  | CONTINUE
  | TO
  | FROM
  | IN
  | NODE
  | RECORD
  | TYPE
  | WITH
  | FREE
  | INTLIT of (int)
  | CHARLIT of (char)
  | DOUBLELIT of (float)
  | STRINGLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
open Ast
# 66 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* DIVIDE *);
  266 (* ASSIGN *);
  267 (* NOT *);
  268 (* DOT *);
  269 (* COLON *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* GT *);
  275 (* GEQ *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* AND *);
  279 (* OR *);
  280 (* RETURN *);
  281 (* IF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* WHILE *);
  285 (* INT *);
  286 (* BOOLEAN *);
  287 (* VOID *);
  288 (* STAR *);
  289 (* LBRACKET *);
  290 (* RBRACKET *);
  291 (* DASH *);
  292 (* RARROW *);
  293 (* LARROW *);
  294 (* ACCIO *);
  295 (* BREAK *);
  296 (* CHAR *);
  297 (* DOUBLE *);
  298 (* EDGE *);
  299 (* EMPTY *);
  300 (* CONTINUE *);
  301 (* TO *);
  302 (* FROM *);
  303 (* IN *);
  304 (* NODE *);
  305 (* RECORD *);
  306 (* TYPE *);
  307 (* WITH *);
  308 (* FREE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  309 (* INTLIT *);
  310 (* CHARLIT *);
  311 (* DOUBLELIT *);
  312 (* STRINGLIT *);
  313 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\005\000\007\000\007\000\
\008\000\008\000\006\000\006\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\011\000\
\011\000\010\000\010\000\013\000\013\000\012\000\012\000\014\000\
\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\004\000\004\000\000\000\001\000\
\001\000\003\000\000\000\002\000\003\000\007\000\011\000\015\000\
\011\000\004\000\006\000\002\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\004\000\004\000\006\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\004\000\004\000\004\000\004\000\003\000\003\000\000\000\
\002\000\000\000\001\000\001\000\003\000\000\000\001\000\003\000\
\005\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\003\000\004\000\000\000\000\000\
\000\000\000\000\000\000\023\000\024\000\000\000\022\000\026\000\
\027\000\025\000\000\000\000\000\000\000\000\000\000\000\020\000\
\021\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\048\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\054\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\037\000\
\033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
\011\000\006\000\000\000\018\000\005\000\000\000\012\000\000\000\
\053\000\000\000\000\000\000\000\030\000\000\000\031\000\052\000\
\051\000\050\000\011\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\032\000\000\000\000\000\
\000\000\000\000\011\000\000\000\011\000\000\000\000\000\000\000\
\015\000\000\000\017\000\000\000\011\000\000\000\016\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\111\000\015\000\075\000\072\000\073\000\
\045\000\038\000\113\000\041\000\039\000\042\000"

let yysindex = "\002\000\
\000\000\000\000\000\000\007\000\058\001\016\255\020\255\026\255\
\030\255\071\255\006\255\000\000\000\000\000\000\072\255\058\001\
\021\255\058\001\058\001\000\000\000\000\058\001\000\000\000\000\
\000\000\000\000\038\255\181\255\058\001\058\001\058\001\000\000\
\000\000\037\255\058\001\000\000\217\255\084\255\092\255\087\255\
\107\255\108\255\000\000\000\000\225\001\081\255\058\001\072\001\
\000\000\058\001\058\001\058\001\059\255\058\001\058\001\058\001\
\058\001\058\001\058\001\058\001\058\001\000\000\058\001\058\001\
\058\001\058\001\058\001\183\000\053\000\219\000\000\000\114\255\
\112\255\100\000\054\000\000\000\068\255\058\001\058\001\000\000\
\063\255\000\000\119\255\008\255\123\001\003\255\003\255\000\000\
\000\000\059\002\059\002\253\254\253\254\253\254\253\254\037\002\
\003\002\094\255\094\255\094\255\253\254\000\000\120\255\058\001\
\000\000\000\000\070\255\000\000\000\000\118\255\000\000\058\001\
\000\000\225\001\225\001\131\255\000\000\058\001\000\000\000\000\
\000\000\000\000\000\000\147\000\135\255\000\000\235\255\058\001\
\157\001\101\000\058\001\000\000\225\001\000\000\106\255\255\000\
\019\255\129\255\000\000\145\255\000\000\060\001\058\001\065\002\
\000\000\035\001\000\000\151\255\000\000\074\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\155\255\
\156\255\000\000\000\000\000\000\000\000\130\255\000\000\000\000\
\000\000\000\000\074\255\000\000\000\000\000\000\000\000\000\000\
\000\000\162\255\000\000\000\000\161\255\000\000\061\255\000\000\
\000\000\167\255\000\000\000\000\032\255\000\000\155\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\170\255\000\000\000\000\000\000\134\255\000\000\000\000\000\000\
\000\000\000\000\000\000\191\001\000\000\120\002\158\002\000\000\
\000\000\087\003\110\003\219\002\245\002\012\003\038\003\014\255\
\204\255\134\003\134\003\134\003\061\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\255\079\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\196\002\000\000\
\000\000\000\000\000\000\000\000\099\255\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\171\000\000\000\107\000\000\000\000\000\
\251\255\236\255\225\255\000\000\000\000\000\000"

let yytablesize = 1205
let yytable = "\028\000\
\014\000\046\000\001\000\050\000\051\000\052\000\012\000\034\000\
\053\000\047\000\037\000\052\000\043\000\044\000\044\000\035\000\
\044\000\029\000\044\000\044\000\118\000\030\000\139\000\068\000\
\069\000\070\000\083\000\031\000\062\000\074\000\032\000\063\000\
\064\000\065\000\060\000\044\000\044\000\060\000\061\000\047\000\
\048\000\061\000\085\000\140\000\086\000\087\000\088\000\044\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\067\000\098\000\099\000\100\000\101\000\102\000\067\000\059\000\
\044\000\060\000\120\000\121\000\122\000\061\000\048\000\033\000\
\114\000\115\000\028\000\036\000\028\000\040\000\028\000\028\000\
\028\000\028\000\028\000\064\000\064\000\028\000\077\000\028\000\
\028\000\028\000\028\000\028\000\028\000\071\000\059\000\028\000\
\028\000\078\000\124\000\079\000\050\000\051\000\052\000\065\000\
\065\000\028\000\127\000\028\000\028\000\028\000\028\000\080\000\
\129\000\081\000\082\000\089\000\106\000\107\000\112\000\116\000\
\028\000\117\000\133\000\123\000\028\000\136\000\126\000\035\000\
\063\000\064\000\065\000\137\000\141\000\028\000\056\000\132\000\
\056\000\146\000\056\000\056\000\056\000\056\000\056\000\128\000\
\112\000\056\000\143\000\056\000\056\000\056\000\056\000\056\000\
\056\000\067\000\149\000\056\000\056\000\058\000\005\000\006\000\
\062\000\007\000\008\000\058\000\007\000\056\000\060\000\056\000\
\056\000\056\000\056\000\063\000\008\000\009\000\014\000\000\000\
\000\000\000\000\010\000\000\000\056\000\049\000\000\000\000\000\
\000\000\000\000\000\000\050\000\051\000\052\000\000\000\110\000\
\053\000\056\000\054\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\060\000\061\000\045\000\000\000\045\000\000\000\
\045\000\045\000\000\000\125\000\062\000\000\000\000\000\063\000\
\064\000\065\000\000\000\076\000\000\000\000\000\000\000\050\000\
\051\000\052\000\045\000\066\000\053\000\130\000\054\000\055\000\
\056\000\057\000\058\000\059\000\000\000\045\000\060\000\061\000\
\067\000\050\000\051\000\052\000\000\000\142\000\000\000\144\000\
\062\000\000\000\000\000\063\000\064\000\065\000\045\000\150\000\
\000\000\014\000\000\000\000\000\000\000\014\000\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\063\000\064\000\065\000\
\000\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\014\000\014\000\000\000\014\000\014\000\000\000\005\000\006\000\
\000\000\007\000\008\000\000\000\000\000\000\000\067\000\014\000\
\000\000\000\000\000\000\000\000\014\000\009\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\104\000\000\000\000\000\
\000\000\014\000\109\000\050\000\051\000\052\000\000\000\011\000\
\053\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\060\000\061\000\000\000\005\000\006\000\000\000\
\007\000\008\000\000\000\000\000\062\000\000\000\000\000\063\000\
\064\000\065\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\010\000\000\000\066\000\108\000\000\000\000\000\000\000\
\000\000\135\000\050\000\051\000\052\000\000\000\110\000\053\000\
\067\000\054\000\055\000\056\000\057\000\058\000\059\000\000\000\
\000\000\060\000\061\000\000\000\005\000\006\000\000\000\007\000\
\008\000\000\000\000\000\062\000\000\000\000\000\063\000\064\000\
\065\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\010\000\000\000\066\000\131\000\000\000\000\000\000\000\000\000\
\000\000\050\000\051\000\052\000\000\000\110\000\053\000\067\000\
\054\000\055\000\056\000\057\000\058\000\059\000\000\000\000\000\
\060\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\063\000\064\000\065\000\
\000\000\103\000\000\000\000\000\000\000\050\000\051\000\052\000\
\000\000\066\000\053\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\000\000\000\000\060\000\061\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\063\000\064\000\065\000\000\000\105\000\000\000\000\000\
\000\000\050\000\051\000\052\000\000\000\066\000\053\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\000\000\000\000\
\060\000\061\000\067\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\063\000\064\000\065\000\
\000\000\138\000\000\000\000\000\000\000\050\000\051\000\052\000\
\000\000\066\000\053\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\000\000\000\000\060\000\061\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\063\000\064\000\065\000\000\000\148\000\000\000\000\000\
\000\000\050\000\051\000\052\000\000\000\066\000\053\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\000\000\000\000\
\060\000\061\000\067\000\016\000\000\000\017\000\000\000\000\000\
\145\000\018\000\062\000\000\000\019\000\063\000\064\000\065\000\
\000\000\016\000\000\000\017\000\000\000\020\000\021\000\018\000\
\000\000\066\000\019\000\005\000\006\000\000\000\007\000\008\000\
\000\000\000\000\022\000\020\000\021\000\000\000\067\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\010\000\
\022\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\025\000\026\000\027\000\000\000\110\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\024\000\025\000\026\000\
\084\000\050\000\051\000\052\000\000\000\000\000\053\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\000\000\000\000\
\060\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\119\000\063\000\064\000\065\000\
\000\000\000\000\000\000\050\000\051\000\052\000\000\000\000\000\
\053\000\066\000\054\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\060\000\061\000\000\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\062\000\000\000\134\000\063\000\
\064\000\065\000\000\000\000\000\000\000\028\000\028\000\028\000\
\000\000\000\000\028\000\066\000\028\000\028\000\028\000\028\000\
\028\000\028\000\000\000\000\000\028\000\028\000\000\000\000\000\
\067\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\028\000\028\000\028\000\028\000\000\000\000\000\000\000\050\000\
\051\000\052\000\000\000\000\000\053\000\028\000\054\000\055\000\
\056\000\057\000\058\000\059\000\000\000\000\000\060\000\061\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\062\000\000\000\000\000\063\000\064\000\065\000\000\000\000\000\
\000\000\050\000\051\000\052\000\000\000\000\000\053\000\066\000\
\054\000\055\000\056\000\057\000\058\000\059\000\000\000\000\000\
\060\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\063\000\064\000\065\000\
\000\000\000\000\000\000\050\000\051\000\052\000\000\000\000\000\
\053\000\066\000\054\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\000\000\
\000\000\050\000\051\000\052\000\062\000\147\000\053\000\063\000\
\064\000\065\000\056\000\057\000\058\000\059\000\151\000\000\000\
\000\000\000\000\000\000\066\000\000\000\000\000\000\000\000\000\
\005\000\006\000\062\000\007\000\008\000\063\000\064\000\065\000\
\067\000\005\000\006\000\000\000\007\000\008\000\000\000\009\000\
\000\000\066\000\000\000\000\000\010\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\010\000\067\000\000\000\
\034\000\110\000\034\000\000\000\034\000\034\000\034\000\034\000\
\000\000\000\000\110\000\034\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\000\000\000\000\034\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\000\000\034\000\034\000\034\000\034\000\000\000\035\000\000\000\
\035\000\000\000\035\000\035\000\035\000\035\000\034\000\000\000\
\000\000\035\000\034\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\000\000\035\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\035\000\
\035\000\035\000\035\000\000\000\057\000\000\000\057\000\000\000\
\057\000\057\000\000\000\000\000\035\000\000\000\000\000\057\000\
\035\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
\000\000\057\000\057\000\040\000\000\000\040\000\000\000\040\000\
\040\000\000\000\000\000\057\000\000\000\057\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\040\000\040\000\057\000\000\000\000\000\041\000\057\000\041\000\
\000\000\041\000\041\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\040\000\041\000\041\000\042\000\040\000\042\000\000\000\
\042\000\042\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\042\000\042\000\041\000\000\000\000\000\043\000\041\000\
\043\000\000\000\043\000\043\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\042\000\043\000\043\000\046\000\042\000\046\000\
\000\000\046\000\046\000\000\000\000\000\000\000\000\000\043\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\000\000\000\000\046\000\046\000\043\000\000\000\000\000\038\000\
\043\000\038\000\000\000\038\000\038\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\038\000\038\000\000\000\000\000\
\000\000\000\000\000\000\046\000\038\000\038\000\039\000\046\000\
\039\000\000\000\039\000\039\000\000\000\000\000\000\000\000\000\
\038\000\000\000\000\000\039\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\039\000\000\000\056\000\000\000\
\056\000\038\000\056\000\056\000\000\000\000\000\000\000\039\000\
\000\000\056\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\000\000\056\000\056\000\000\000\000\000\000\000\
\039\000\000\000\000\000\000\000\000\000\056\000\000\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\000"

let yycheck = "\005\000\
\000\000\022\000\001\000\007\001\008\001\009\001\000\000\002\001\
\012\001\002\001\016\000\009\001\018\000\019\000\001\001\010\001\
\003\001\002\001\005\001\006\001\013\001\002\001\004\001\029\000\
\030\000\031\000\047\000\002\001\032\001\035\000\001\001\035\001\
\036\001\037\001\003\001\022\001\023\001\006\001\003\001\002\001\
\033\001\006\001\048\000\025\001\050\000\051\000\052\000\034\001\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\060\001\063\000\064\000\065\000\066\000\067\000\060\001\003\001\
\051\001\034\001\098\000\099\000\100\000\034\001\033\001\001\001\
\078\000\079\000\001\001\004\001\003\001\057\001\005\001\006\001\
\007\001\008\001\009\001\005\001\006\001\012\001\003\001\014\001\
\015\001\016\001\017\001\018\001\019\001\057\001\034\001\022\001\
\023\001\006\001\104\000\013\001\007\001\008\001\009\001\005\001\
\006\001\032\001\112\000\034\001\035\001\036\001\037\001\005\001\
\118\000\006\001\034\001\057\001\003\001\006\001\051\001\057\001\
\047\001\003\001\128\000\004\001\051\001\131\000\057\001\010\001\
\035\001\036\001\037\001\026\001\004\001\060\001\001\001\001\001\
\003\001\143\000\005\001\006\001\007\001\008\001\009\001\013\001\
\051\001\012\001\002\001\014\001\015\001\016\001\017\001\018\001\
\019\001\060\001\004\001\022\001\023\001\003\001\024\001\025\001\
\005\001\027\001\028\001\034\001\003\001\032\001\006\001\034\001\
\035\001\036\001\037\001\005\001\003\001\039\001\004\000\255\255\
\255\255\255\255\044\001\255\255\047\001\001\001\255\255\255\255\
\255\255\255\255\255\255\007\001\008\001\009\001\255\255\057\001\
\012\001\060\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\105\000\032\001\255\255\255\255\035\001\
\036\001\037\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\009\001\023\001\047\001\012\001\123\000\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\034\001\022\001\023\001\
\060\001\007\001\008\001\009\001\255\255\139\000\255\255\141\000\
\032\001\255\255\255\255\035\001\036\001\037\001\051\001\149\000\
\255\255\001\001\255\255\255\255\255\255\005\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\255\255\
\024\001\025\001\255\255\027\001\028\001\255\255\024\001\025\001\
\255\255\027\001\028\001\255\255\255\255\255\255\060\001\039\001\
\255\255\255\255\255\255\255\255\044\001\039\001\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\001\001\255\255\255\255\
\255\255\057\001\005\001\007\001\008\001\009\001\255\255\057\001\
\012\001\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\255\255\024\001\025\001\255\255\
\027\001\028\001\255\255\255\255\032\001\255\255\255\255\035\001\
\036\001\037\001\255\255\255\255\039\001\255\255\255\255\255\255\
\255\255\044\001\255\255\047\001\001\001\255\255\255\255\255\255\
\255\255\005\001\007\001\008\001\009\001\255\255\057\001\012\001\
\060\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\255\255\024\001\025\001\255\255\027\001\
\028\001\255\255\255\255\032\001\255\255\255\255\035\001\036\001\
\037\001\255\255\255\255\039\001\255\255\255\255\255\255\255\255\
\044\001\255\255\047\001\001\001\255\255\255\255\255\255\255\255\
\255\255\007\001\008\001\009\001\255\255\057\001\012\001\060\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\032\001\255\255\255\255\035\001\036\001\037\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\255\255\047\001\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\060\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\255\255\035\001\036\001\037\001\255\255\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\255\255\047\001\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\060\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\032\001\255\255\255\255\035\001\036\001\037\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\255\255\047\001\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\060\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\255\255\035\001\036\001\037\001\255\255\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\255\255\047\001\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\060\001\002\001\255\255\004\001\255\255\255\255\
\005\001\008\001\032\001\255\255\011\001\035\001\036\001\037\001\
\255\255\002\001\255\255\004\001\255\255\020\001\021\001\008\001\
\255\255\047\001\011\001\024\001\025\001\255\255\027\001\028\001\
\255\255\255\255\033\001\020\001\021\001\255\255\060\001\255\255\
\255\255\255\255\039\001\255\255\255\255\255\255\255\255\044\001\
\033\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\255\255\057\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\007\001\008\001\009\001\255\255\255\255\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\032\001\255\255\034\001\035\001\036\001\037\001\
\255\255\255\255\255\255\007\001\008\001\009\001\255\255\255\255\
\012\001\047\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\255\255\255\255\060\001\255\255\
\255\255\255\255\255\255\255\255\032\001\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\007\001\008\001\009\001\
\255\255\255\255\012\001\047\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\255\255\255\255\
\060\001\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\034\001\035\001\036\001\037\001\255\255\255\255\255\255\007\001\
\008\001\009\001\255\255\255\255\012\001\047\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\255\255\255\255\060\001\255\255\255\255\255\255\255\255\255\255\
\032\001\255\255\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\007\001\008\001\009\001\255\255\255\255\012\001\047\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\255\255\255\255\255\255\060\001\255\255\255\255\255\255\
\255\255\255\255\032\001\255\255\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\007\001\008\001\009\001\255\255\255\255\
\012\001\047\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\255\255\007\001\008\001\009\001\032\001\005\001\012\001\035\001\
\036\001\037\001\016\001\017\001\018\001\019\001\005\001\255\255\
\255\255\255\255\255\255\047\001\255\255\255\255\255\255\255\255\
\024\001\025\001\032\001\027\001\028\001\035\001\036\001\037\001\
\060\001\024\001\025\001\255\255\027\001\028\001\255\255\039\001\
\255\255\047\001\255\255\255\255\044\001\255\255\255\255\255\255\
\039\001\255\255\255\255\255\255\255\255\044\001\060\001\255\255\
\001\001\057\001\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\057\001\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\032\001\
\255\255\034\001\035\001\036\001\037\001\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\007\001\008\001\047\001\255\255\
\255\255\012\001\051\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\034\001\
\035\001\036\001\037\001\255\255\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\255\255\047\001\255\255\255\255\012\001\
\051\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\001\001\255\255\003\001\255\255\005\001\
\006\001\255\255\255\255\032\001\255\255\034\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\047\001\255\255\255\255\001\001\051\001\003\001\
\255\255\005\001\006\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\047\001\022\001\023\001\001\001\051\001\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\255\255\034\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\047\001\255\255\255\255\001\001\051\001\
\003\001\255\255\005\001\006\001\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\047\001\022\001\023\001\001\001\051\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\034\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\047\001\255\255\255\255\001\001\
\051\001\003\001\255\255\005\001\006\001\255\255\034\001\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\047\001\022\001\023\001\001\001\051\001\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\034\001\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\023\001\255\255\001\001\255\255\
\003\001\051\001\005\001\006\001\255\255\255\255\255\255\034\001\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\051\001\255\255\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  DOT\000\
  COLON\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOLEAN\000\
  VOID\000\
  STAR\000\
  LBRACKET\000\
  RBRACKET\000\
  DASH\000\
  RARROW\000\
  LARROW\000\
  ACCIO\000\
  BREAK\000\
  CHAR\000\
  DOUBLE\000\
  EDGE\000\
  EMPTY\000\
  CONTINUE\000\
  TO\000\
  FROM\000\
  IN\000\
  NODE\000\
  RECORD\000\
  TYPE\000\
  WITH\000\
  FREE\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  CHARLIT\000\
  DOUBLELIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 43 "parser.mly"
            ( _1 )
# 602 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                 ( [], [] )
# 608 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 47 "parser.mly"
              ( (_2 :: fst _1), snd _1 )
# 616 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 48 "parser.mly"
              ( fst _1, (_2 :: snd _1) )
# 624 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'func_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "parser.mly"
                                     ( _1, List.rev _3 )
# 632 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'formals_opt) in
    Obj.repr(
# 54 "parser.mly"
                              ( _1, _3 )
# 640 "parser.ml"
               : 'func_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                  ( [] )
# 646 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 58 "parser.mly"
                  ( List.rev _1 )
# 653 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parser.mly"
                         ( [_1] )
# 660 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                         ( _3 :: _1 )
# 668 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
                   ( [] )
# 674 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 66 "parser.mly"
                   ( _2 :: _1 )
# 682 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                   ( Return _2 )
# 689 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 70 "parser.mly"
                                                  ( If(_3, _6, []) )
# 697 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 71 "parser.mly"
                                                                                 ( If(_3, _6, List.rev _10) )
# 706 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 12 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 9 : 'stmt_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 72 "parser.mly"
                                                                                                      ( If(_3, List.rev _6, [If(_11, List.rev _14, [])]) )
# 716 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 74 "parser.mly"
     ( For(_3, _5, _7, List.rev _10) )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                        ( Asn(_1, _3) )
# 734 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 76 "parser.mly"
                                            ( While(_3, _5) )
# 742 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
              ( Break )
# 748 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                 ( Continue )
# 754 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 81 "parser.mly"
                     ( IntLit(_1) )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                     ( BoolLit(true) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                     ( BoolLit(false) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                     ( StrLit(_1) )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 85 "parser.mly"
                     ( CharLit(_1) )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 86 "parser.mly"
                     ( FloatLit(_1) )
# 794 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                     ( Id(_1) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 88 "parser.mly"
                                  ( List(_2))
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 89 "parser.mly"
                                 ( Call(_1, _3) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                              ( Item(_1, _3) )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                       ( Subset(_1, _3, _5) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                ( Dot(_1, _3) )
# 841 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 849 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 865 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 881 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 889 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 897 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 905 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 913 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, In,    _3) )
# 945 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                         ( Unop(Neg, _2) )
# 952 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Unop(Not, _2) )
# 959 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Unop(Star, _1) )
# 966 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'with_opt) in
    Obj.repr(
# 109 "parser.mly"
                              ( Edge(_1, To, _3, _4) )
# 975 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'with_opt) in
    Obj.repr(
# 110 "parser.mly"
                              ( Edge(_1, From, _3, _4) )
# 984 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'with_opt) in
    Obj.repr(
# 111 "parser.mly"
                             ( Edge(_1, Dash, _3, _4) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'with_opt) in
    Obj.repr(
# 112 "parser.mly"
                                       ( Graph(_2, _4) )
# 1001 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rec_opt) in
    Obj.repr(
# 113 "parser.mly"
                          ( Record(_2) )
# 1008 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                       ( _2 )
# 1015 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                             ( Noexpr )
# 1021 "parser.ml"
               : 'with_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
              ( _2 )
# 1028 "parser.ml"
               : 'with_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                  ( [] )
# 1034 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 122 "parser.mly"
                  ( List.rev _1 )
# 1041 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                            ( [_1] )
# 1048 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                            ( _3 :: _1 )
# 1056 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                  ( [] )
# 1062 "parser.ml"
               : 'rec_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_list) in
    Obj.repr(
# 130 "parser.mly"
              ( List.rev _1 )
# 1069 "parser.ml"
               : 'rec_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                     ( [(_1, _3)] )
# 1077 "parser.ml"
               : 'rec_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'rec_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                 ( (_3, _5) :: _1 )
# 1086 "parser.ml"
               : 'rec_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
