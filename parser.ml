type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | DIVIDE
  | ASSIGN
  | NOT
  | DOT
  | COLON
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOLEAN
  | VOID
  | TIMES
  | LBRACKET
  | RBRACKET
  | DASH
  | RARROW
  | LARROW
  | ACCIO
  | BREAK
  | CHAR
  | DOUBLE
  | EDGE
  | EMPTY
  | CONTINUE
  | TO
  | FROM
  | IN
  | NODE
  | RECORD
  | TYPE
  | WITH
  | FREE
  | FPLUS
  | FMINUS
  | FTIMES
  | FDIVIDE
  | ADD
  | EADD
  | PLUSEQ
  | FPLUSEQ
  | ADDEQ
  | EADDEQ
  | COPY
  | INTLIT of (int)
  | CHARLIT of (char)
  | DOUBLELIT of (float)
  | STRINGLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
open Ast
# 77 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* DIVIDE *);
  266 (* ASSIGN *);
  267 (* NOT *);
  268 (* DOT *);
  269 (* COLON *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* GT *);
  275 (* GEQ *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* AND *);
  279 (* OR *);
  280 (* RETURN *);
  281 (* IF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* WHILE *);
  285 (* INT *);
  286 (* BOOLEAN *);
  287 (* VOID *);
  288 (* TIMES *);
  289 (* LBRACKET *);
  290 (* RBRACKET *);
  291 (* DASH *);
  292 (* RARROW *);
  293 (* LARROW *);
  294 (* ACCIO *);
  295 (* BREAK *);
  296 (* CHAR *);
  297 (* DOUBLE *);
  298 (* EDGE *);
  299 (* EMPTY *);
  300 (* CONTINUE *);
  301 (* TO *);
  302 (* FROM *);
  303 (* IN *);
  304 (* NODE *);
  305 (* RECORD *);
  306 (* TYPE *);
  307 (* WITH *);
  308 (* FREE *);
  309 (* FPLUS *);
  310 (* FMINUS *);
  311 (* FTIMES *);
  312 (* FDIVIDE *);
  313 (* ADD *);
  314 (* EADD *);
  315 (* PLUSEQ *);
  316 (* FPLUSEQ *);
  317 (* ADDEQ *);
  318 (* EADDEQ *);
  319 (* COPY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  320 (* INTLIT *);
  321 (* CHARLIT *);
  322 (* DOUBLELIT *);
  323 (* STRINGLIT *);
  324 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\005\000\007\000\
\007\000\008\000\008\000\006\000\006\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\012\000\012\000\
\011\000\011\000\015\000\015\000\013\000\013\000\014\000\014\000\
\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\000\000\001\000\001\000\002\000\004\000\004\000\000\000\
\001\000\001\000\003\000\000\000\002\000\003\000\002\000\007\000\
\011\000\015\000\011\000\004\000\004\000\004\000\004\000\004\000\
\004\000\006\000\002\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\004\000\004\000\006\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\004\000\004\000\004\000\
\004\000\005\000\005\000\003\000\003\000\003\000\000\000\002\000\
\000\000\001\000\001\000\003\000\003\000\003\000\000\000\001\000\
\003\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\083\000\000\000\000\000\004\000\000\000\
\000\000\001\000\005\000\012\000\010\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\006\000\000\000\000\000\030\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\033\000\034\000\032\000\000\000\013\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\000\000\000\014\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\037\000\020\000\000\000\
\038\000\022\000\023\000\024\000\025\000\021\000\000\000\064\000\
\063\000\062\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\026\000\039\000\000\000\
\000\000\000\000\000\000\012\000\000\000\012\000\000\000\000\000\
\000\000\017\000\000\000\019\000\000\000\012\000\000\000\018\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\007\000\008\000\016\000\014\000\015\000\
\038\000\039\000\055\000\160\000\044\000\046\000\056\000\047\000"

let yysindex = "\001\000\
\207\254\000\000\026\255\000\000\029\000\207\254\000\000\027\255\
\218\254\000\000\000\000\000\000\000\000\032\255\068\255\181\255\
\000\000\226\254\121\000\011\255\000\000\132\000\132\000\000\000\
\000\000\132\000\078\255\079\255\080\255\132\000\082\255\088\255\
\000\000\000\000\000\000\000\000\167\255\000\000\058\002\000\000\
\039\255\003\255\210\005\006\255\099\255\087\255\090\255\000\000\
\000\000\116\002\132\000\132\000\132\000\078\007\067\255\107\255\
\000\000\000\000\132\000\132\000\132\000\158\000\132\000\132\000\
\132\000\132\000\132\000\000\000\132\000\132\000\132\000\037\255\
\132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
\132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
\132\000\132\000\132\000\132\000\066\255\132\000\073\255\132\000\
\132\000\000\000\050\255\000\000\010\006\174\002\066\006\000\000\
\132\000\116\255\232\002\219\006\004\255\230\006\034\003\092\003\
\150\003\208\003\010\004\044\255\044\255\000\000\000\000\214\007\
\214\007\245\007\245\007\245\007\245\007\182\007\130\007\000\000\
\199\005\199\005\199\005\245\007\044\255\044\255\000\000\000\000\
\128\008\128\008\219\006\132\000\078\007\132\000\078\007\078\007\
\112\255\125\255\132\000\000\000\078\007\000\000\000\000\132\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\
\000\000\000\000\219\006\219\006\132\000\000\000\068\004\151\255\
\119\007\219\006\078\007\230\255\132\000\000\000\000\000\104\255\
\122\006\253\254\127\255\000\000\130\255\000\000\004\000\132\000\
\053\000\000\000\178\006\000\000\131\255\000\000\083\000\000\000"

let yyrindex = "\000\000\
\138\000\000\000\000\000\000\000\000\000\139\000\000\000\000\000\
\138\255\000\000\000\000\000\000\000\000\000\000\139\255\000\000\
\000\000\000\000\000\000\140\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\122\255\000\000\000\000\
\000\000\000\000\000\000\000\000\126\004\000\000\000\000\000\000\
\000\000\226\000\000\000\000\000\000\000\000\000\153\255\000\000\
\000\000\000\000\000\000\000\000\000\000\015\255\000\000\005\255\
\000\000\000\000\154\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\184\004\026\007\000\000\000\000\000\000\
\000\000\000\000\000\000\086\001\144\001\000\000\000\000\086\002\
\144\002\017\008\055\008\078\008\104\008\092\255\167\000\000\000\
\100\005\100\005\100\005\127\008\202\001\004\002\000\000\000\000\
\137\005\163\005\210\004\000\000\007\255\000\000\017\255\009\255\
\000\000\000\000\000\000\000\000\103\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\005\027\005\000\000\000\000\000\000\000\000\
\154\008\074\005\019\255\000\000\000\000\000\000\000\000\083\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\154\000\000\000\210\255\000\000\000\000\
\000\000\237\255\102\000\152\255\000\000\000\000\000\000\000\000"

let yytablesize = 2516
let yytable = "\043\000\
\180\000\001\000\048\000\049\000\059\000\059\000\050\000\074\000\
\095\000\077\000\054\000\096\000\077\000\081\000\081\000\061\000\
\152\000\075\000\003\000\078\000\075\000\181\000\078\000\082\000\
\082\000\161\000\162\000\009\000\010\000\013\000\012\000\101\000\
\102\000\103\000\017\000\062\000\062\000\040\000\074\000\054\000\
\107\000\108\000\110\000\111\000\112\000\113\000\114\000\115\000\
\075\000\116\000\117\000\118\000\071\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\127\000\128\000\129\000\130\000\
\131\000\132\000\133\000\134\000\135\000\136\000\137\000\138\000\
\139\000\018\000\141\000\081\000\143\000\144\000\045\000\051\000\
\052\000\053\000\057\000\016\000\016\000\149\000\016\000\016\000\
\058\000\092\000\016\000\098\000\055\000\016\000\055\000\099\000\
\055\000\055\000\088\000\089\000\104\000\168\000\016\000\016\000\
\119\000\076\000\016\000\016\000\076\000\016\000\016\000\097\000\
\105\000\055\000\055\000\016\000\140\000\145\000\150\000\172\000\
\163\000\016\000\164\000\142\000\165\000\055\000\016\000\167\000\
\166\000\178\000\182\000\184\000\169\000\183\000\190\000\185\000\
\076\000\002\000\003\000\170\000\008\000\009\000\055\000\191\000\
\079\000\171\000\016\000\016\000\016\000\016\000\016\000\174\000\
\019\000\177\000\020\000\073\000\073\000\080\000\022\000\011\000\
\106\000\023\000\000\000\000\000\187\000\000\000\000\000\000\000\
\059\000\000\000\024\000\025\000\000\000\000\000\026\000\027\000\
\060\000\028\000\029\000\061\000\000\000\000\000\019\000\030\000\
\020\000\021\000\000\000\000\000\022\000\031\000\000\000\023\000\
\000\000\000\000\032\000\000\000\000\000\000\000\000\000\062\000\
\024\000\025\000\000\000\000\000\026\000\027\000\000\000\028\000\
\029\000\000\000\000\000\000\000\000\000\030\000\033\000\034\000\
\035\000\036\000\037\000\031\000\000\000\000\000\000\000\000\000\
\032\000\063\000\064\000\065\000\066\000\067\000\000\000\019\000\
\000\000\020\000\176\000\000\000\000\000\022\000\000\000\000\000\
\023\000\000\000\000\000\000\000\033\000\034\000\035\000\036\000\
\037\000\024\000\025\000\000\000\000\000\026\000\027\000\000\000\
\028\000\029\000\000\000\000\000\000\000\019\000\030\000\020\000\
\186\000\000\000\000\000\022\000\031\000\000\000\023\000\000\000\
\000\000\032\000\000\000\000\000\000\000\000\000\000\000\024\000\
\025\000\000\000\000\000\026\000\027\000\000\000\028\000\029\000\
\000\000\000\000\000\000\000\000\030\000\033\000\034\000\035\000\
\036\000\037\000\031\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\020\000\188\000\000\000\000\000\022\000\000\000\000\000\023\000\
\000\000\000\000\000\000\033\000\034\000\035\000\036\000\037\000\
\024\000\025\000\000\000\000\000\026\000\027\000\000\000\028\000\
\029\000\000\000\000\000\000\000\019\000\030\000\020\000\192\000\
\000\000\000\000\022\000\031\000\000\000\023\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\024\000\025\000\
\000\000\000\000\026\000\027\000\000\000\028\000\029\000\000\000\
\000\000\000\000\000\000\030\000\033\000\034\000\035\000\036\000\
\037\000\031\000\019\000\041\000\020\000\000\000\032\000\000\000\
\022\000\000\000\000\000\023\000\000\000\019\000\000\000\020\000\
\000\000\000\000\000\000\022\000\024\000\025\000\023\000\000\000\
\000\000\000\000\033\000\034\000\035\000\036\000\037\000\024\000\
\025\000\030\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\020\000\000\000\000\000\030\000\022\000\000\000\056\000\
\023\000\056\000\000\000\056\000\056\000\000\000\000\000\000\000\
\000\000\024\000\025\000\000\000\000\000\000\000\000\000\000\000\
\033\000\034\000\035\000\036\000\042\000\056\000\030\000\000\000\
\000\000\000\000\000\000\033\000\034\000\035\000\036\000\042\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\000\000\000\000\033\000\034\000\035\000\
\036\000\109\000\035\000\000\000\035\000\000\000\035\000\035\000\
\035\000\035\000\035\000\000\000\000\000\035\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\000\000\035\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\000\000\035\000\035\000\035\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\000\000\000\000\000\000\035\000\000\000\035\000\035\000\
\035\000\035\000\035\000\035\000\070\000\000\000\070\000\000\000\
\070\000\070\000\070\000\070\000\070\000\000\000\000\000\070\000\
\000\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
\000\000\070\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\000\000\000\070\000\070\000\070\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\041\000\000\000\
\041\000\000\000\041\000\041\000\041\000\041\000\000\000\000\000\
\000\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\041\000\041\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\041\000\041\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\041\000\000\000\041\000\041\000\000\000\000\000\041\000\041\000\
\042\000\000\000\042\000\000\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\042\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\000\000\042\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\042\000\000\000\042\000\042\000\000\000\000\000\
\042\000\042\000\045\000\000\000\045\000\000\000\045\000\045\000\
\045\000\045\000\000\000\000\000\000\000\045\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\000\000\000\000\045\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\045\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\045\000\000\000\045\000\045\000\
\000\000\000\000\045\000\045\000\046\000\000\000\046\000\000\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\046\000\
\000\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\000\000\046\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\046\000\046\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\046\000\000\000\
\046\000\046\000\068\000\000\000\046\000\046\000\000\000\000\000\
\069\000\070\000\071\000\000\000\000\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\049\000\000\000\
\049\000\081\000\049\000\049\000\082\000\083\000\084\000\000\000\
\000\000\000\000\000\000\049\000\049\000\000\000\000\000\000\000\
\085\000\000\000\000\000\049\000\049\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\100\000\000\000\000\000\049\000\
\000\000\000\000\069\000\070\000\071\000\000\000\000\000\072\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\049\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\050\000\081\000\050\000\050\000\082\000\083\000\
\084\000\000\000\000\000\000\000\000\000\050\000\050\000\000\000\
\000\000\000\000\085\000\000\000\000\000\050\000\050\000\000\000\
\086\000\087\000\088\000\089\000\090\000\091\000\147\000\000\000\
\000\000\050\000\000\000\000\000\069\000\070\000\071\000\000\000\
\000\000\072\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\050\000\079\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\000\000\000\000\
\082\000\083\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\085\000\000\000\000\000\000\000\
\000\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\151\000\000\000\000\000\000\000\000\000\000\000\069\000\070\000\
\071\000\000\000\000\000\072\000\000\000\073\000\074\000\075\000\
\076\000\077\000\078\000\000\000\000\000\079\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\000\000\000\000\082\000\083\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\000\000\000\000\000\000\000\000\086\000\087\000\088\000\089\000\
\090\000\091\000\154\000\000\000\000\000\000\000\000\000\000\000\
\069\000\070\000\071\000\000\000\000\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\155\000\000\000\000\000\000\000\
\000\000\000\000\069\000\070\000\071\000\000\000\000\000\072\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\000\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\000\000\000\000\082\000\083\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\085\000\000\000\000\000\000\000\000\000\000\000\
\086\000\087\000\088\000\089\000\090\000\091\000\156\000\000\000\
\000\000\000\000\000\000\000\000\069\000\070\000\071\000\000\000\
\000\000\072\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\000\000\079\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\000\000\000\000\
\082\000\083\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\085\000\000\000\000\000\000\000\
\000\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\157\000\000\000\000\000\000\000\000\000\000\000\069\000\070\000\
\071\000\000\000\000\000\072\000\000\000\073\000\074\000\075\000\
\076\000\077\000\078\000\000\000\000\000\079\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\000\000\000\000\082\000\083\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\000\000\000\000\000\000\000\000\086\000\087\000\088\000\089\000\
\090\000\091\000\158\000\000\000\000\000\000\000\000\000\000\000\
\069\000\070\000\071\000\000\000\000\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\173\000\000\000\000\000\000\000\
\000\000\000\000\069\000\070\000\071\000\000\000\000\000\072\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\000\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\000\000\000\000\082\000\083\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\085\000\000\000\000\000\000\000\000\000\000\000\
\086\000\087\000\088\000\089\000\090\000\091\000\035\000\000\000\
\000\000\000\000\000\000\000\000\035\000\035\000\035\000\000\000\
\000\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\000\000\035\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\035\000\035\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\068\000\000\000\068\000\000\000\068\000\068\000\000\000\000\000\
\000\000\000\000\000\000\068\000\000\000\068\000\068\000\068\000\
\068\000\068\000\068\000\000\000\000\000\068\000\068\000\000\000\
\000\000\000\000\065\000\000\000\065\000\000\000\065\000\065\000\
\000\000\068\000\000\000\000\000\000\000\065\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\000\000\068\000\065\000\
\065\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\068\000\068\000\000\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\066\000\000\000\066\000\065\000\066\000\066\000\000\000\
\000\000\000\000\065\000\065\000\066\000\000\000\066\000\066\000\
\066\000\066\000\066\000\066\000\000\000\000\000\066\000\066\000\
\000\000\000\000\000\000\067\000\000\000\067\000\000\000\067\000\
\067\000\000\000\066\000\000\000\000\000\000\000\067\000\000\000\
\067\000\067\000\067\000\067\000\067\000\067\000\000\000\066\000\
\067\000\067\000\000\000\066\000\000\000\000\000\000\000\000\000\
\000\000\066\000\066\000\000\000\067\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\072\000\000\000\072\000\067\000\072\000\072\000\
\000\000\000\000\000\000\067\000\067\000\072\000\000\000\072\000\
\072\000\072\000\072\000\072\000\072\000\000\000\000\000\072\000\
\072\000\000\000\000\000\000\000\071\000\000\000\071\000\000\000\
\071\000\071\000\000\000\072\000\000\000\000\000\000\000\071\000\
\000\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\072\000\071\000\071\000\000\000\072\000\000\000\000\000\000\000\
\000\000\000\000\072\000\072\000\000\000\071\000\000\000\000\000\
\000\000\058\000\000\000\058\000\000\000\058\000\058\000\000\000\
\000\000\000\000\071\000\000\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\071\000\071\000\058\000\058\000\
\000\000\000\000\000\000\059\000\000\000\059\000\000\000\059\000\
\059\000\000\000\058\000\000\000\000\000\000\000\000\000\000\000\
\059\000\059\000\059\000\059\000\059\000\059\000\000\000\058\000\
\059\000\059\000\000\000\058\000\000\000\000\000\000\000\000\000\
\000\000\058\000\058\000\000\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\070\000\071\000\
\000\000\059\000\000\000\000\000\093\000\059\000\000\000\094\000\
\069\000\070\000\071\000\059\000\059\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\081\000\079\000\
\080\000\082\000\083\000\084\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\159\000\000\000\086\000\087\000\088\000\089\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\146\000\000\000\000\000\000\000\
\069\000\070\000\071\000\000\000\000\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\148\000\000\000\000\000\000\000\
\069\000\070\000\071\000\000\000\000\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\179\000\000\000\000\000\000\000\
\069\000\070\000\071\000\000\000\000\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\189\000\000\000\000\000\000\000\
\069\000\070\000\071\000\000\000\000\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\000\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\069\000\070\000\071\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\069\000\070\000\071\000\000\000\
\000\000\072\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\081\000\079\000\080\000\082\000\083\000\084\000\
\000\000\000\000\000\000\000\000\000\000\081\000\000\000\153\000\
\082\000\083\000\084\000\000\000\000\000\000\000\000\000\086\000\
\087\000\088\000\089\000\000\000\085\000\000\000\000\000\000\000\
\000\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\035\000\035\000\035\000\000\000\000\000\035\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\000\000\035\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\000\000\035\000\035\000\035\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\035\000\035\000\035\000\035\000\069\000\070\000\071\000\000\000\
\000\000\072\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\000\000\079\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\000\000\000\000\
\082\000\083\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\085\000\069\000\070\000\071\000\
\000\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\069\000\070\000\071\000\000\000\000\000\072\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\081\000\079\000\
\175\000\082\000\083\000\084\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\000\000\000\000\086\000\087\000\088\000\089\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\086\000\087\000\
\088\000\089\000\090\000\091\000\069\000\070\000\071\000\000\000\
\000\000\072\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\000\000\000\000\000\
\082\000\083\000\084\000\000\000\069\000\070\000\071\000\000\000\
\000\000\072\000\000\000\000\000\085\000\075\000\076\000\077\000\
\078\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\000\000\000\000\000\000\000\000\000\000\081\000\000\000\000\000\
\082\000\083\000\084\000\069\000\070\000\071\000\000\000\000\000\
\072\000\000\000\000\000\000\000\085\000\000\000\000\000\000\000\
\000\000\000\000\086\000\087\000\088\000\089\000\090\000\091\000\
\000\000\051\000\000\000\051\000\081\000\051\000\051\000\082\000\
\083\000\084\000\000\000\000\000\000\000\000\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\051\000\051\000\
\000\000\086\000\087\000\088\000\089\000\090\000\091\000\000\000\
\000\000\000\000\051\000\000\000\000\000\000\000\000\000\052\000\
\000\000\052\000\000\000\052\000\052\000\000\000\000\000\051\000\
\000\000\000\000\000\000\051\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\000\000\052\000\052\000\053\000\000\000\
\053\000\000\000\053\000\053\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\053\000\053\000\052\000\000\000\000\000\
\054\000\052\000\054\000\000\000\054\000\054\000\000\000\053\000\
\000\000\000\000\000\000\000\000\000\000\054\000\054\000\054\000\
\054\000\054\000\054\000\000\000\053\000\054\000\054\000\057\000\
\053\000\057\000\000\000\057\000\057\000\000\000\069\000\070\000\
\071\000\054\000\000\000\072\000\057\000\057\000\057\000\057\000\
\057\000\057\000\000\000\000\000\057\000\057\000\054\000\000\000\
\000\000\000\000\054\000\000\000\000\000\000\000\000\000\081\000\
\057\000\000\000\082\000\083\000\084\000\068\000\000\000\068\000\
\068\000\068\000\068\000\068\000\068\000\057\000\000\000\068\000\
\068\000\057\000\000\000\000\000\086\000\087\000\088\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\068\000"

let yycheck = "\019\000\
\004\001\001\000\022\000\023\000\002\001\002\001\026\000\003\001\
\003\001\003\001\030\000\006\001\006\001\005\001\006\001\013\001\
\013\001\003\001\068\001\003\001\006\001\025\001\006\001\005\001\
\006\001\130\000\131\000\002\001\000\000\068\001\004\001\051\000\
\052\000\053\000\003\001\033\001\033\001\068\001\034\001\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\034\001\069\000\070\000\071\000\009\001\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\006\001\094\000\032\001\096\000\097\000\068\001\002\001\
\002\001\002\001\001\001\001\001\002\001\105\000\004\001\005\001\
\001\001\051\001\008\001\005\001\001\001\011\001\003\001\006\001\
\005\001\006\001\055\001\056\001\034\001\148\000\020\001\021\001\
\068\001\003\001\024\001\025\001\006\001\027\001\028\001\013\001\
\006\001\022\001\023\001\033\001\051\001\068\001\003\001\166\000\
\140\000\039\001\142\000\051\001\013\001\034\001\044\001\147\000\
\004\001\026\001\004\001\002\001\152\000\180\000\004\001\182\000\
\034\001\000\000\000\000\159\000\003\001\003\001\051\001\190\000\
\005\001\165\000\064\001\065\001\066\001\067\001\068\001\001\001\
\002\001\173\000\004\001\034\001\003\001\005\001\008\001\006\000\
\059\000\011\001\255\255\255\255\184\000\255\255\255\255\255\255\
\002\001\255\255\020\001\021\001\255\255\255\255\024\001\025\001\
\010\001\027\001\028\001\013\001\255\255\255\255\002\001\033\001\
\004\001\005\001\255\255\255\255\008\001\039\001\255\255\011\001\
\255\255\255\255\044\001\255\255\255\255\255\255\255\255\033\001\
\020\001\021\001\255\255\255\255\024\001\025\001\255\255\027\001\
\028\001\255\255\255\255\255\255\255\255\033\001\064\001\065\001\
\066\001\067\001\068\001\039\001\255\255\255\255\255\255\255\255\
\044\001\059\001\060\001\061\001\062\001\063\001\255\255\002\001\
\255\255\004\001\005\001\255\255\255\255\008\001\255\255\255\255\
\011\001\255\255\255\255\255\255\064\001\065\001\066\001\067\001\
\068\001\020\001\021\001\255\255\255\255\024\001\025\001\255\255\
\027\001\028\001\255\255\255\255\255\255\002\001\033\001\004\001\
\005\001\255\255\255\255\008\001\039\001\255\255\011\001\255\255\
\255\255\044\001\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\255\255\255\255\024\001\025\001\255\255\027\001\028\001\
\255\255\255\255\255\255\255\255\033\001\064\001\065\001\066\001\
\067\001\068\001\039\001\255\255\255\255\255\255\255\255\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\004\001\005\001\255\255\255\255\008\001\255\255\255\255\011\001\
\255\255\255\255\255\255\064\001\065\001\066\001\067\001\068\001\
\020\001\021\001\255\255\255\255\024\001\025\001\255\255\027\001\
\028\001\255\255\255\255\255\255\002\001\033\001\004\001\005\001\
\255\255\255\255\008\001\039\001\255\255\011\001\255\255\255\255\
\044\001\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\024\001\025\001\255\255\027\001\028\001\255\255\
\255\255\255\255\255\255\033\001\064\001\065\001\066\001\067\001\
\068\001\039\001\002\001\003\001\004\001\255\255\044\001\255\255\
\008\001\255\255\255\255\011\001\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\008\001\020\001\021\001\011\001\255\255\
\255\255\255\255\064\001\065\001\066\001\067\001\068\001\020\001\
\021\001\033\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\255\255\033\001\008\001\255\255\001\001\
\011\001\003\001\255\255\005\001\006\001\255\255\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\064\001\065\001\066\001\067\001\068\001\023\001\033\001\255\255\
\255\255\255\255\255\255\064\001\065\001\066\001\067\001\068\001\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\051\001\255\255\255\255\255\255\064\001\065\001\066\001\
\067\001\068\001\001\001\255\255\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\034\001\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\051\001\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\001\001\255\255\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\032\001\255\255\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\001\001\255\255\
\003\001\255\255\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\255\255\255\255\
\051\001\255\255\053\001\054\001\255\255\255\255\057\001\058\001\
\001\001\255\255\003\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\035\001\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\047\001\255\255\
\255\255\255\255\051\001\255\255\053\001\054\001\255\255\255\255\
\057\001\058\001\001\001\255\255\003\001\255\255\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\051\001\255\255\053\001\054\001\
\255\255\255\255\057\001\058\001\001\001\255\255\003\001\255\255\
\005\001\006\001\007\001\008\001\255\255\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\255\255\255\255\255\255\051\001\255\255\
\053\001\054\001\001\001\255\255\057\001\058\001\255\255\255\255\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\032\001\005\001\006\001\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\047\001\255\255\255\255\022\001\023\001\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\001\001\255\255\255\255\034\001\
\255\255\255\255\007\001\008\001\009\001\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\051\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\003\001\032\001\005\001\006\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\014\001\015\001\255\255\
\255\255\255\255\047\001\255\255\255\255\022\001\023\001\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\001\001\255\255\
\255\255\034\001\255\255\255\255\007\001\008\001\009\001\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\051\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\001\001\255\255\255\255\255\255\255\255\255\255\007\001\008\001\
\009\001\255\255\255\255\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\032\001\
\255\255\255\255\035\001\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\047\001\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\001\001\255\255\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\001\001\255\255\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\032\001\255\255\255\255\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\001\001\255\255\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\001\001\255\255\255\255\255\255\255\255\255\255\007\001\008\001\
\009\001\255\255\255\255\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\032\001\
\255\255\255\255\035\001\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\047\001\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\001\001\255\255\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\001\001\255\255\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\032\001\255\255\255\255\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\001\001\255\255\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\001\001\255\255\003\001\255\255\005\001\006\001\255\255\255\255\
\255\255\255\255\255\255\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\005\001\006\001\
\255\255\034\001\255\255\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\047\001\022\001\
\023\001\255\255\051\001\255\255\255\255\255\255\255\255\255\255\
\057\001\058\001\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\001\001\255\255\003\001\051\001\005\001\006\001\255\255\
\255\255\255\255\057\001\058\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\255\255\255\255\255\255\001\001\255\255\003\001\255\255\005\001\
\006\001\255\255\034\001\255\255\255\255\255\255\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\047\001\
\022\001\023\001\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\057\001\058\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\001\001\255\255\003\001\051\001\005\001\006\001\
\255\255\255\255\255\255\057\001\058\001\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\034\001\255\255\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\047\001\022\001\023\001\255\255\051\001\255\255\255\255\255\255\
\255\255\255\255\057\001\058\001\255\255\034\001\255\255\255\255\
\255\255\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\047\001\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\057\001\058\001\022\001\023\001\
\255\255\255\255\255\255\001\001\255\255\003\001\255\255\005\001\
\006\001\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\047\001\
\022\001\023\001\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\057\001\058\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\007\001\008\001\009\001\
\255\255\047\001\255\255\255\255\003\001\051\001\255\255\006\001\
\007\001\008\001\009\001\057\001\058\001\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\032\001\022\001\
\023\001\035\001\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\051\001\255\255\053\001\054\001\055\001\056\001\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\007\001\008\001\009\001\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\007\001\008\001\009\001\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\032\001\022\001\023\001\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\056\001\255\255\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\034\001\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\007\001\008\001\009\001\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\007\001\008\001\009\001\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\007\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\032\001\022\001\
\034\001\035\001\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\032\001\255\255\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\056\001\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\007\001\008\001\009\001\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\037\001\255\255\007\001\008\001\009\001\255\255\
\255\255\012\001\255\255\255\255\047\001\016\001\017\001\018\001\
\019\001\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\255\255\
\035\001\036\001\037\001\007\001\008\001\009\001\255\255\255\255\
\012\001\255\255\255\255\255\255\047\001\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\255\255\001\001\255\255\003\001\032\001\005\001\006\001\035\001\
\036\001\037\001\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\255\255\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\001\001\
\255\255\003\001\255\255\005\001\006\001\255\255\255\255\047\001\
\255\255\255\255\255\255\051\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\034\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\047\001\255\255\255\255\
\001\001\051\001\003\001\255\255\005\001\006\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\047\001\022\001\023\001\001\001\
\051\001\003\001\255\255\005\001\006\001\255\255\007\001\008\001\
\009\001\034\001\255\255\012\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\047\001\255\255\
\255\255\255\255\051\001\255\255\255\255\255\255\255\255\032\001\
\034\001\255\255\035\001\036\001\037\001\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\047\001\255\255\022\001\
\023\001\051\001\255\255\255\255\053\001\054\001\055\001\056\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\057\001\058\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  DOT\000\
  COLON\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOLEAN\000\
  VOID\000\
  TIMES\000\
  LBRACKET\000\
  RBRACKET\000\
  DASH\000\
  RARROW\000\
  LARROW\000\
  ACCIO\000\
  BREAK\000\
  CHAR\000\
  DOUBLE\000\
  EDGE\000\
  EMPTY\000\
  CONTINUE\000\
  TO\000\
  FROM\000\
  IN\000\
  NODE\000\
  RECORD\000\
  TYPE\000\
  WITH\000\
  FREE\000\
  FPLUS\000\
  FMINUS\000\
  FTIMES\000\
  FDIVIDE\000\
  ADD\000\
  EADD\000\
  PLUSEQ\000\
  FPLUSEQ\000\
  ADDEQ\000\
  EADDEQ\000\
  COPY\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  CHARLIT\000\
  DOUBLELIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 49 "parser.mly"
            ( _1 )
# 982 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
                 ( [] )
# 988 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decls_list) in
    Obj.repr(
# 53 "parser.mly"
              ( List.rev _1 )
# 995 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 56 "parser.mly"
        ( [_1] )
# 1002 "parser.ml"
               : 'decls_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 57 "parser.mly"
                   ( _2::_1 )
# 1010 "parser.ml"
               : 'decls_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'func_dec) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 60 "parser.mly"
                                     ( _1, List.rev _3 )
# 1018 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'formals_opt) in
    Obj.repr(
# 63 "parser.mly"
                              ( _1, _3 )
# 1026 "parser.ml"
               : 'func_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                  ( [] )
# 1032 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 67 "parser.mly"
                  ( List.rev _1 )
# 1039 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
                         ( [_1] )
# 1046 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                         ( _3 :: _1 )
# 1054 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                   ( [] )
# 1060 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 75 "parser.mly"
                   ( _2 :: _1 )
# 1068 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                   ( Return _2 )
# 1075 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
              ( Expr _1 )
# 1082 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 80 "parser.mly"
                                                  ( If(_3, _6, []) )
# 1090 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 81 "parser.mly"
                                                                                 ( If(_3, _6, List.rev _10) )
# 1099 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 12 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 9 : 'stmt_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 82 "parser.mly"
                                                                                                      ( If(_3, List.rev _6, [If(_11, List.rev _14, [])]) )
# 1109 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 84 "parser.mly"
     ( For(_3, _5, _7, List.rev _10) )
# 1119 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                        ( Asn(_1, _3, true) )
# 1127 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                      ( Asn(_1, _3, false) )
# 1135 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                        ( Asn(_1, Binop(Id(_1), Add, _3), true) )
# 1143 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                         ( Asn(_1, Binop(Id(_1), Fadd, _3), true) )
# 1151 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                       ( Asn(_1, Binop(Id(_1), Gadd, _3), true) )
# 1159 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                        ( Asn(_1, Binop(Id(_1), Eadd, _3), true) )
# 1167 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 91 "parser.mly"
                                            ( While(_3, _5) )
# 1175 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
              ( Break )
# 1181 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                 ( Continue )
# 1187 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parser.mly"
                     ( IntLit(_1) )
# 1194 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                     ( BoolLit(true) )
# 1200 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                     ( BoolLit(false) )
# 1206 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
                     ( StrLit(_1) )
# 1213 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 100 "parser.mly"
                     ( CharLit(_1) )
# 1220 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 101 "parser.mly"
                     ( FloatLit(_1) )
# 1227 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                     ( Id(_1) )
# 1234 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 103 "parser.mly"
                                  ( List(_2))
# 1241 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 104 "parser.mly"
                                 ( Call(_1, _3) )
# 1249 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                              ( Item(_1, _3) )
# 1257 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                                       ( Subset(_1, _3, _5) )
# 1266 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                ( Dot(_1, _3) )
# 1274 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 1282 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 1290 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 1298 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 1306 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                      ( Binop(_1, Fadd,   _3) )
# 1314 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                      ( Binop(_1, Fsub,   _3) )
# 1322 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                      ( Binop(_1, Fmult,  _3) )
# 1330 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                      ( Binop(_1, Fdiv,   _3) )
# 1338 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 1346 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 1354 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 1362 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 1370 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 1378 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 1386 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 1394 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 1402 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, In,    _3) )
# 1410 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Gadd, _3) )
# 1418 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, Eadd, _3) )
# 1426 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                         ( Unop(Neg, _2) )
# 1433 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     ( Unop(Not, _2) )
# 1440 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'with_opt) in
    Obj.repr(
# 129 "parser.mly"
                              ( Edge(_1, To, _3, _4) )
# 1449 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'with_opt) in
    Obj.repr(
# 130 "parser.mly"
                              ( Edge(_1, From, _3, _4) )
# 1458 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'with_opt) in
    Obj.repr(
# 131 "parser.mly"
                             ( Edge(_1, Dash, _3, _4) )
# 1467 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                            ( Graph([], _4) )
# 1474 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                 ( Graph([_2], _5) )
# 1482 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'graph_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                       ( Graph(_2, _5) )
# 1490 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                             ( Node(_1, _3) )
# 1498 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rec_opt) in
    Obj.repr(
# 136 "parser.mly"
                          ( Record(_2) )
# 1505 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                    ( _2 )
# 1512 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                             ( Noexpr )
# 1518 "parser.ml"
               : 'with_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
              ( _2 )
# 1525 "parser.ml"
               : 'with_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                  ( [] )
# 1531 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 146 "parser.mly"
                  ( List.rev _1 )
# 1538 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
                            ( [_1] )
# 1545 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                            ( _3 :: _1 )
# 1553 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                          ( [_3; _1] )
# 1561 "parser.ml"
               : 'graph_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'graph_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                          ( _3 :: _1 )
# 1569 "parser.ml"
               : 'graph_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
                  ( [] )
# 1575 "parser.ml"
               : 'rec_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_list) in
    Obj.repr(
# 160 "parser.mly"
              ( List.rev _1 )
# 1582 "parser.ml"
               : 'rec_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                                     ( [(_1, _3)] )
# 1590 "parser.ml"
               : 'rec_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'rec_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                                 ( (_3, _5) :: _1 )
# 1599 "parser.ml"
               : 'rec_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
